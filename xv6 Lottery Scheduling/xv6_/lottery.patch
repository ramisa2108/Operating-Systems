diff --git a/Makefile b/Makefile
index 09d790c..925b4a9 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+#QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -284,3 +285,4 @@ tar:
 	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
 
 .PHONY: dist-test dist
+
diff --git a/defs.h b/defs.h
index 82fb982..678e5e2 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,8 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            settickets(int);
+void            getpinfo(struct pstat*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -165,6 +168,7 @@ extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
 
+
 // uart.c
 void            uartinit(void);
 void            uartintr(void);
@@ -188,3 +192,4 @@ void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
diff --git a/proc.c b/proc.c
index 806b1b1..5a851dc 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,16 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -20,10 +24,21 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+
+unsigned long seed = 1;
+unsigned int
+generate_random(int M)
+{
+  seed = seed * 1664525 + 1013904223;
+  return seed % M + 1;
+}
+
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  
 }
 
 // Must be called with interrupts disabled
@@ -88,9 +103,13 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->tickets = 1;
+  p->ticks = 0;
+  
   release(&ptable.lock);
 
+
+  
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
     p->state = UNUSED;
@@ -138,10 +157,11 @@ userinit(void)
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
   p->tf->eip = 0;  // beginning of initcode.S
+  
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
+  
   // this assignment to p->state lets other cores
   // run this process. the acquire forces the above
   // writes to be visible, and the lock is also needed
@@ -199,6 +219,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->tickets = curproc->tickets;
+
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -246,6 +268,7 @@ exit(void)
   iput(curproc->cwd);
   end_op();
   curproc->cwd = 0;
+  
 
   acquire(&ptable.lock);
 
@@ -294,6 +317,8 @@ wait(void)
         p->parent = 0;
         p->name[0] = 0;
         p->killed = 0;
+        p->tickets = 0;
+        p->ticks = 0;
         p->state = UNUSED;
         release(&ptable.lock);
         return pid;
@@ -332,24 +357,72 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    int total_tickets = 0;
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      
       if(p->state != RUNNABLE)
         continue;
+      
+      // count tickets of runnable processes 
+      total_tickets += p->tickets;
+      
+    }
+     // schedule only if runnable process exists
+    if(total_tickets > 0)
+    {
+      // generate a random ticket
+      uint random_ticket = generate_random(total_tickets);
+      
+
+      // loop to find the runnable process holding the ticket
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        
+        if(p->state != RUNNABLE)
+          continue;
+        
+        if((uint) p->tickets < random_ticket){
+          random_ticket -= p->tickets;
+        }
+        else {
+          
+          // This is the chosen process
+          // Switch to chosen process.  It is the process's job
+          // to release ptable.lock and then reacquire it
+          // before jumping back to us.
+          
+          break;
+        }
+      }
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
+      
+      c->proc = p;    
       switchuvm(p);
+      
       p->state = RUNNING;
+      
+      // ticks before process switched
+      acquire(&tickslock);
+      uint start_ticks = ticks;
+      release(&tickslock);  
 
       swtch(&(c->scheduler), p->context);
+
+      // ticks after process run completion
+      acquire(&tickslock);
+      uint end_ticks = ticks;
+      release(&tickslock);
+
       switchkvm();
 
+      p->ticks += (end_ticks - start_ticks);
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+
     }
+
+    // release lock
     release(&ptable.lock);
 
   }
@@ -532,3 +605,34 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+// sets the number of tickets for current process
+void
+settickets(int number)
+{
+    acquire(&ptable.lock);
+    myproc()->tickets = number;
+    release(&ptable.lock);    
+}
+
+// gets all running process info 
+void
+getpinfo(struct pstat *ps)
+{
+  acquire(&ptable.lock);
+
+  
+  for(int i=0;i<NPROC;i++){
+    ps->inuse[i] = (ptable.proc[i].state == UNUSED) ? 0 : 1;
+    
+    if(ps->inuse[i])
+    {
+      ps->tickets[i] = ptable.proc[i].tickets;
+      ps->ticks[i] = ptable.proc[i].ticks;
+      ps->pid[i] = ptable.proc[i].pid;
+    }
+  }
+
+  release(&ptable.lock);
+}
+
diff --git a/proc.h b/proc.h
index 1647114..38db9fa 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // Number of tickets the process hold
+  uint ticks;                   // Number of clock cycles the process has run
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +58,4 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..0d3cf58
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+// all process state
+struct pstat{
+    
+    int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+    int tickets[NPROC]; // the number of tickets this process has
+    int pid[NPROC];     // the PID of each process
+    int ticks[NPROC]; // the number of ticks each process has accumulated
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..12f2811 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_yield] sys_yield,
 };
 
 void
@@ -143,3 +149,4 @@ syscall(void)
     curproc->tf->eax = -1;
   }
 }
+
diff --git a/syscall.h b/syscall.h
index bc5f356..4cf9052 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_yield 24
+
diff --git a/sysproc.c b/sysproc.c
index 0686d29..3ebbf71 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,13 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
+void
+sys_yield(void)
+{
+  return yield();
+}
 int
 sys_fork(void)
 {
@@ -89,3 +95,25 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_settickets(void)
+{
+  int number;
+  if(argint(0, &number) < 0)
+    return -1;
+  settickets(number);
+  return 0;
+
+}
+
+int sys_getpinfo(void)
+{
+  
+  struct pstat *p;
+  if(argptr(0, (void *)&p, sizeof(*p)) < 0)
+    return -1;
+  getpinfo(p);
+  return 0;
+
+}
diff --git a/user.h b/user.h
index 4f99c52..4a152fe 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,3 +41,4 @@ void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+
diff --git a/usys.S b/usys.S
index 8bfd8a1..6000d9a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
+SYSCALL(yield)
+
